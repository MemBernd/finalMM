-- MySQL Script generated by MySQL Workbench
-- Sat Oct 14 05:03:36 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema sep
-- -----------------------------------------------------
-- Database for final project in Modern Methods in Software Engineering
DROP SCHEMA IF EXISTS `sep` ;

-- -----------------------------------------------------
-- Schema sep
--
-- Database for final project in Modern Methods in Software Engineering
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sep` DEFAULT CHARACTER SET utf8 ;
USE `sep` ;

-- -----------------------------------------------------
-- Table `sep`.`Client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`Client` (
  `clientRecord` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `company` VARCHAR(45) NULL,
  PRIMARY KEY (`clientRecord`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sep`.`EventRequestStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`EventRequestStatus` (
  `idEventRequestStatus` INT NOT NULL,
  `status` VARCHAR(45) NULL,
  PRIMARY KEY (`idEventRequestStatus`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sep`.`EventRequest`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`EventRequest` (
  `eventRecord` INT NOT NULL AUTO_INCREMENT,
  `eventType` VARCHAR(45) NULL,
  `eventStartDateTime` DATETIME NULL,
  `eventEndDateTime` DATETIME NULL,
  `attendees` INT NULL,
  `budget` DECIMAL(10,2) NULL,
  `clientRecord` INT NOT NULL,
  `idEventRequestStatus` INT NOT NULL,
  PRIMARY KEY (`eventRecord`),
  CONSTRAINT `fk_EventRequest_Client`
    FOREIGN KEY (`clientRecord`)
    REFERENCES `sep`.`Client` (`clientRecord`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EventRequest_EventRequestStatus1`
    FOREIGN KEY (`idEventRequestStatus`)
    REFERENCES `sep`.`EventRequestStatus` (`idEventRequestStatus`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_EventRequest_Client_idx` ON `sep`.`EventRequest` (`clientRecord` ASC);

CREATE INDEX `fk_EventRequest_EventRequestStatus1_idx` ON `sep`.`EventRequest` (`idEventRequestStatus` ASC);


-- -----------------------------------------------------
-- Table `sep`.`Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`Role` (
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sep`.`Employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`Employee` (
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NULL,
  `role` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`username`),
  CONSTRAINT `fk_Employee_Role1`
    FOREIGN KEY (`role`)
    REFERENCES `sep`.`Role` (`name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Employee_Role1_idx` ON `sep`.`Employee` (`role` ASC);


-- -----------------------------------------------------
-- Table `sep`.`Summary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`Summary` (
  `idSummary` INT NOT NULL AUTO_INCREMENT,
  `eventType` VARCHAR(45) NULL,
  `description` MEDIUMTEXT NULL,
  `attendees` INT NULL,
  `eventStartDate` DATETIME NULL,
  `eventEndDate` DATETIME NULL,
  `budget` DECIMAL(10,2) NULL,
  `eventRecord` INT NOT NULL,
  PRIMARY KEY (`idSummary`),
  CONSTRAINT `fk_Summary_EventRequest1`
    FOREIGN KEY (`eventRecord`)
    REFERENCES `sep`.`EventRequest` (`eventRecord`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Summary_EventRequest1_idx` ON `sep`.`Summary` (`eventRecord` ASC);


-- -----------------------------------------------------
-- Table `sep`.`Preferences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`Preferences` (
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB
COMMENT = '										';


-- -----------------------------------------------------
-- Table `sep`.`Task`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`Task` (
  `idTask` INT NOT NULL AUTO_INCREMENT,
  `subject` VARCHAR(60) NULL,
  `description` MEDIUMTEXT NULL,
  `priority` VARCHAR(45) NULL,
  `status` VARCHAR(45) NULL,
  `eventRecord` INT NOT NULL,
  `creator` VARCHAR(45) NOT NULL,
  `assignee` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idTask`),
  CONSTRAINT `fk_Task_EventRequest1`
    FOREIGN KEY (`eventRecord`)
    REFERENCES `sep`.`EventRequest` (`eventRecord`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Task_Employee1`
    FOREIGN KEY (`creator`)
    REFERENCES `sep`.`Employee` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Task_Employee2`
    FOREIGN KEY (`assignee`)
    REFERENCES `sep`.`Employee` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Task_EventRequest1_idx` ON `sep`.`Task` (`eventRecord` ASC);

CREATE INDEX `fk_Task_Employee1_idx` ON `sep`.`Task` (`creator` ASC);

CREATE INDEX `fk_Task_Employee2_idx` ON `sep`.`Task` (`assignee` ASC);


-- -----------------------------------------------------
-- Table `sep`.`FinancialRequest`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`FinancialRequest` (
  `idFinancialRequest` INT NOT NULL AUTO_INCREMENT,
  `amount` DECIMAL(10,2) NULL,
  `reason` VARCHAR(60) NULL,
  `discount` DECIMAL(10,2) NULL,
  `agreedBudget` DECIMAL(10,2) NULL,
  `status` VARCHAR(45) NULL,
  `eventRecord` INT NOT NULL,
  `requester` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idFinancialRequest`),
  CONSTRAINT `fk_FinancialRequest_EventRequest1`
    FOREIGN KEY (`eventRecord`)
    REFERENCES `sep`.`EventRequest` (`eventRecord`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FinancialRequest_Employee1`
    FOREIGN KEY (`requester`)
    REFERENCES `sep`.`Employee` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_FinancialRequest_EventRequest1_idx` ON `sep`.`FinancialRequest` (`eventRecord` ASC);

CREATE INDEX `fk_FinancialRequest_Employee1_idx` ON `sep`.`FinancialRequest` (`requester` ASC);


-- -----------------------------------------------------
-- Table `sep`.`StaffRequest`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`StaffRequest` (
  `idStaffRequest` INT NOT NULL AUTO_INCREMENT,
  `experience` VARCHAR(45) NULL,
  `jobTitle` VARCHAR(45) NULL,
  `jobDescription` LONGTEXT NULL,
  `requester` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idStaffRequest`),
  CONSTRAINT `fk_StaffRequest_Employee1`
    FOREIGN KEY (`requester`)
    REFERENCES `sep`.`Employee` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_StaffRequest_Employee1_idx` ON `sep`.`StaffRequest` (`requester` ASC);


-- -----------------------------------------------------
-- Table `sep`.`EventRequestPreferences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`EventRequestPreferences` (
  `eventRecord` INT NOT NULL,
  `preference` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`eventRecord`, `preference`),
  CONSTRAINT `fk_EventRequest_has_Preferences_EventRequest1`
    FOREIGN KEY (`eventRecord`)
    REFERENCES `sep`.`EventRequest` (`eventRecord`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EventRequest_has_Preferences_Preferences1`
    FOREIGN KEY (`preference`)
    REFERENCES `sep`.`Preferences` (`name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_EventRequest_has_Preferences_Preferences1_idx` ON `sep`.`EventRequestPreferences` (`preference` ASC);

CREATE INDEX `fk_EventRequest_has_Preferences_EventRequest1_idx` ON `sep`.`EventRequestPreferences` (`eventRecord` ASC);


-- -----------------------------------------------------
-- Table `sep`.`eventPreferences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`eventPreferences` (
  `eventRecord` INT NOT NULL,
  `preference` VARCHAR(45) NOT NULL,
  `description` MEDIUMTEXT NULL,
  PRIMARY KEY (`eventRecord`, `preference`),
  CONSTRAINT `fk_Summary_has_Preferences_Preferences1`
    FOREIGN KEY (`preference`)
    REFERENCES `sep`.`Preferences` (`name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SummaryPreferences_EventRequest1`
    FOREIGN KEY (`eventRecord`)
    REFERENCES `sep`.`EventRequest` (`eventRecord`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Summary_has_Preferences_Preferences1_idx` ON `sep`.`eventPreferences` (`preference` ASC);

CREATE INDEX `fk_SummaryPreferences_EventRequest1_idx` ON `sep`.`eventPreferences` (`eventRecord` ASC);


-- -----------------------------------------------------
-- Table `sep`.`Plan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`Plan` (
  `idPlan` INT NOT NULL AUTO_INCREMENT,
  `description` MEDIUMTEXT NULL,
  PRIMARY KEY (`idPlan`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sep`.`PlanCoversTasks`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`PlanCoversTasks` (
  `idPlan` INT NOT NULL,
  `idTask` INT NOT NULL,
  `creator` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPlan`, `idTask`),
  CONSTRAINT `fk_Plan_has_Task_Plan1`
    FOREIGN KEY (`idPlan`)
    REFERENCES `sep`.`Plan` (`idPlan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Plan_has_Task_Task1`
    FOREIGN KEY (`idTask`)
    REFERENCES `sep`.`Task` (`idTask`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PlanCoversTasks_Employee1`
    FOREIGN KEY (`creator`)
    REFERENCES `sep`.`Employee` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Plan_has_Task_Task1_idx` ON `sep`.`PlanCoversTasks` (`idTask` ASC);

CREATE INDEX `fk_Plan_has_Task_Plan1_idx` ON `sep`.`PlanCoversTasks` (`idPlan` ASC);

CREATE INDEX `fk_PlanCoversTasks_Employee1_idx` ON `sep`.`PlanCoversTasks` (`creator` ASC);


-- -----------------------------------------------------
-- Table `sep`.`FinancialFeedback`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sep`.`FinancialFeedback` (
  `eventRecord` INT NOT NULL,
  `description` MEDIUMTEXT NULL,
  PRIMARY KEY (`eventRecord`),
  CONSTRAINT `fk_FinancialFeedback_EventRequest1`
    FOREIGN KEY (`eventRecord`)
    REFERENCES `sep`.`EventRequest` (`eventRecord`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_FinancialFeedback_EventRequest1_idx` ON `sep`.`FinancialFeedback` (`eventRecord` ASC);

USE `sep` ;

-- -----------------------------------------------------
-- procedure scsoAccept
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `scsoAccept`(id int)
begin
DECLARE idevent int;
SET idevent = (Select eventRecord from Task where idTask = id);
UPDATE `task` 
SET 
    assignee = 'alice',
    subject = 'Feedback for eventRequest'
WHERE
    idTask = id;
UPDATE eventrequest 
SET 
    idEventRequestStatus = 2
WHERE
    eventRecord = idevent;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure scsoReject
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `scsoReject`(IN `id` INT)
begin
DECLARE idevent int;
SET idevent = (Select eventRecord from Task where idTask = id);
DELETE FROM task 
WHERE
    idTask = id;
UPDATE eventrequest 
SET 
    idEventRequestStatus = 3
WHERE
    eventRecord = idevent;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getEventDetailsFromTask
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getEventDetailsFromTask`(IN `id` INT)
begin
Declare idEvent int;
SET idEvent = (Select task.eventRecord from task where task.idTask = id);
SELECT 
    eventrequest.eventRecord,
    eventrequest.eventType,
    eventrequest.eventStartDateTime,
    eventrequest.eventEndDateTime,
    eventrequest.attendees,
    eventrequest.budget,
    client.name AS clientName,
    client.company
FROM
    `eventrequest`
        JOIN
    client ON eventrequest.clientRecord = client.clientRecord
WHERE
    eventrequest.eventRecord = idEvent;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure fmProcessed
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `fmProcessed`(IN `taskId` INT, IN `description` MEDIUMTEXT)
BEGIN
Declare idEvent int;
set idEvent = (Select eventRecord from task where idTask =  taskId);
INSERT INTO `financialfeedback` (`eventRecord`, `description`)
VALUES (idEvent, description);
UPDATE task 
SET 
    task.subject = 'Approve or reject event request.',
    task.assignee = 'mike'
WHERE
    idTask = taskId;
UPDATE eventrequest 
SET 
    eventrequest.idEventRequestStatus = 5
WHERE
    eventRecord = idEvent;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure amReject
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `amReject`(IN `id` INT)
begin
DECLARE idevent int;
SET idevent = (Select eventRecord from Task where idTask = id);
DELETE FROM task 
WHERE
    idTask = id;
UPDATE eventrequest 
SET 
    idEventRequestStatus = 13
WHERE
    eventRecord = idevent;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure amAccept
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `amAccept`(id int)
begin
DECLARE idevent int;
SET idevent = (Select eventRecord from Task where idTask = id);
UPDATE `task` 
SET 
    assignee = 'janet',
    subject = 'Create Summary for Task'
WHERE
    idTask = id;
UPDATE eventrequest 
SET 
    idEventRequestStatus = 4
WHERE
    eventRecord = idevent;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getInitialPreferencesFromTask
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getInitialPreferencesFromTask`(IN `id` INT)
begin
Declare idEvent int;
SET idEvent = (Select task.eventRecord from task where task.idTask = id);
SELECT 
    preference
FROM
    `eventrequestpreferences`
WHERE
    eventRecord = idEvent;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getPreferencesFromTask
-- -----------------------------------------------------

DELIMITER $$
USE `sep`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getPreferencesFromTask`(IN `id` INT)
begin
Declare idEvent int;
SET idEvent = (Select task.eventRecord from task where task.idTask = id);
SELECT 
    preference, description
FROM
    `eventpreferences`
WHERE
    eventRecord = idEvent;
end$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `sep`.`Client`
-- -----------------------------------------------------
START TRANSACTION;
USE `sep`;
INSERT INTO `sep`.`Client` (`clientRecord`, `name`, `company`) VALUES (DEFAULT, 'Bernardo Riede', 'Spotify');
INSERT INTO `sep`.`Client` (`clientRecord`, `name`, `company`) VALUES (DEFAULT, 'Vasileios Charalampidis', 'KTH');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sep`.`EventRequestStatus`
-- -----------------------------------------------------
START TRANSACTION;
USE `sep`;
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (1, 'created');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (2, 'acceptedBySCSO');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (3, 'rejectedBySCSO');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (4, 'acceptedByAM');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (5, 'processedByFM');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (6, 'summaryCreated');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (7, 'open');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (8, 'pendingReviewSTM');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (9, 'pendingRequest');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (10, 'finished');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (11, 'staffRequest');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (12, 'processedByHR');
INSERT INTO `sep`.`EventRequestStatus` (`idEventRequestStatus`, `status`) VALUES (13, 'rejectedByAm');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sep`.`Role`
-- -----------------------------------------------------
START TRANSACTION;
USE `sep`;
INSERT INTO `sep`.`Role` (`name`) VALUES ('Financial Manager');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Administration Manager');
INSERT INTO `sep`.`Role` (`name`) VALUES ('CSO');
INSERT INTO `sep`.`Role` (`name`) VALUES ('SCSO');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Production Manager');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Service Manager');
INSERT INTO `sep`.`Role` (`name`) VALUES ('HR Manager');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Subteam');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Decoration');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Photographer');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Audio');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Graphic Designer');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Network');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Chef');
INSERT INTO `sep`.`Role` (`name`) VALUES ('Waitress');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sep`.`Employee`
-- -----------------------------------------------------
START TRANSACTION;
USE `sep`;
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('jack', 'jack', 'Production Manager');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('mike', 'mike', 'Administration Manager');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('janet', 'janet', 'SCSO');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('sarah', 'sarah', 'CSO');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('alice', 'alice', 'Financial Manager');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('natalie', 'natalie', 'Service Manager');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('magy', 'magy', 'Subteam');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('simon', 'simon', 'HR Manager');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('angelina', 'angelina', 'Decoration');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('tobias', 'tobias', 'Photographer');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('antony', 'antony', 'Audio');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('julia', 'julia', 'Graphic Designer');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('nicolas', 'nicolas', 'Network');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('helen', 'helen', 'Chef');
INSERT INTO `sep`.`Employee` (`username`, `password`, `role`) VALUES ('kate', 'kate', 'Waitress');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sep`.`Preferences`
-- -----------------------------------------------------
START TRANSACTION;
USE `sep`;
INSERT INTO `sep`.`Preferences` (`name`) VALUES ('Decorations');
INSERT INTO `sep`.`Preferences` (`name`) VALUES ('Parties');
INSERT INTO `sep`.`Preferences` (`name`) VALUES ('Photos/Filming');
INSERT INTO `sep`.`Preferences` (`name`) VALUES ('Drinks');
INSERT INTO `sep`.`Preferences` (`name`) VALUES ('Food');
INSERT INTO `sep`.`Preferences` (`name`) VALUES ('WiFi');
INSERT INTO `sep`.`Preferences` (`name`) VALUES ('Other');

COMMIT;

